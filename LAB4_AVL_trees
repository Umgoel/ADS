#include<iostream>
#include<queue>
#include<unordered_map>
using namespace std;

typedef struct Node{
    int value;
    node* left;
    node* right;
    int height;
}node;

class AVL{
    public:
    node *root;
    AVL(){
        this->root = NULL;
    }
    int calcHeight(node* r1){
        if(r1->left && r1->right){
            if(r1->left->height < r1->right->height)
                return r1->right->height+1;
            else
                return r1->left->height+1;
        }
        else if(r1->left && r1->right==NULL)
            return r1->left->height+1;
        else if(r1->right && r1->left==NULL)
            return r1->right->height+1;
        else
            return 0;
    }

    int balFac(node* r1){
        if(n->left && n->right){
            return n->left->height - n->right->height;
        }
        else if(n->left && n->right==NULL)
            return n->left->height;
        else if(n->left==NULL && n->right)
            return n->right->height;
        else
            return 0;
    }

    node* singleR_Rotn(node *n){
        node *t1, *t2;
        t1 = n;
        t2 = t1->left;
        t1->left = t2->right;
        t2->right = t1;

        return t2;
    }

    node* singleL_Rotn(node *n){
        node *t1, *t2;
        t1 = n;
        t2 = n->right;
        t1->right = t2->left;
        t2->left = t1;
        return t2;
    }

    node* doubleRL_Rotn(node* n){
        node *t1, *t2, *t3;
        t1 = n;
        t2 = t1->right;
        t3 = t1->right->left;

        t1->right = t3->left;
        t2->left = t3->right;
        t3->left = n;
        t3->rigth = t2;

        return t3;
    }

    node* doubleLR_Rotn(node* n){
        node *t1, *t2, *t3;
        t1 = n;
        t2 = n->left;
        t3 = n->left->right;

        t1->left = t3->right;
        t2->right = t3->left;
        t3->left = t2;
        t3->right = t1;

        return t3;
    }

    node* insert(node *root, int data){
        if(root==NULL){
            node *n;
            n = new node;
            n->data = data;
            root = n;
            root->left = root->right = NULL;
            root->height = 1;
            return root;
        }
        else{
            if(data<root->data)
                root->left = insert(root->left, data);
            else
                root->right = insert(root->right,data);
        }
        root->height = calcHeight(root);
        if(balFac(root)==2 && balFac(root->left)==1)
            root = singleL_Rotn(root);
        else if(balFac(root)==-2 && balFac(root->right)==-1)
            root = singleR_Rotn(root);
        else if(balFac(root)==2 && balFac(root->left)==-1)
            root = doubleLR_Rotn(root);
        else if(balFac(root)==-2 && balFac(root->right)==1)
            root = doubleRL_Rotn(root);

        return root;
    }
    
}